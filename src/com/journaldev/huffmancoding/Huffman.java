//Name: Peter Essam Maguid      ID:20190141

package com.journaldev.huffmancoding;

import java.util.HashMap;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
class Node implements Comparable<Node> {
    int frequency;
    char character;
    Node left, right;

    public int compareTo(Node node) { return frequency - node.frequency; }
}

public class Huffman {

    private static Map<Character, String> charPrefix = new HashMap<>();
    static Node root;
    private static Node buildTree(Map<Character, Integer> huffmanMap) {

        PriorityQueue<Node> priorityQueue = new PriorityQueue<>();
        Set<Character> keySet = huffmanMap.keySet();
        for (Character character : keySet) {

            Node huffmanNode = new Node();
            huffmanNode.character = character;
            huffmanNode.frequency = huffmanMap.get(character);
            huffmanNode.left = null;
            huffmanNode.right = null;
            priorityQueue.offer(huffmanNode);
        }

        while (priorityQueue.size() > 1) {

            Node x = priorityQueue.peek();
            priorityQueue.poll();

            Node y = priorityQueue.peek();
            priorityQueue.poll();

            Node sum = new Node();

            sum.frequency = x.frequency + y.frequency;
            sum.character = '-';

            sum.left = x;

            sum.right = y;
            root = sum;

            priorityQueue.offer(sum);
        }

        return priorityQueue.poll();
    }

    public static void printCode(Node root, StringBuilder s)
    {

        // base case; if the left and right are null
        // then its a leaf node and we print the codes generated by traversing the tree.
        if (root.left == null && root.right == null) {
            charPrefix.put(root.character, s.toString());
            System.out.println(root.character + ":" + s);

            return;
        }

        // if we go to left then add "0" to the code.
        // if we go to the right add"1" to the code.
        // recursive calls for left and right sub-tree of the generated tree.
        printCode(root.left, s.append("0"));
        s.deleteCharAt(s.length() - 1);
        printCode(root.right, s.append("1"));
        s.deleteCharAt(s.length() - 1);
    }


    private static String encode(String input) {
        Map<Character, Integer> huffmanMap = new HashMap<>();
        for (int i = 0; i < input.length(); i++) {
            if (!huffmanMap.containsKey(input.charAt(i))) {
                huffmanMap.put(input.charAt(i), 0);
            }
            huffmanMap.put(input.charAt(i), huffmanMap.get(input.charAt(i)) + 1);
        }

        System.out.println("Huffman Map = " + huffmanMap);
        root = buildTree(huffmanMap);

        printCode(root, new StringBuilder());
        System.out.println("Huffman Prefix Map = " + charPrefix);
        StringBuilder s = new StringBuilder();

        for (int i = 0; i < input.length(); i++) {
            char c = input.charAt(i);
            s.append(charPrefix.get(c));
        }

        return s.toString();
    }

    private static void decode(String s) {

        StringBuilder output = new StringBuilder();

        Node temp = root;

        System.out.println("Encoded: " + s);

        for (int i = 0; i < s.length(); i++) {
            int j = Integer.parseInt(String.valueOf(s.charAt(i)));

            if (j == 0) {
                temp = temp.left;
                if (temp.left == null && temp.right == null) {
                    output.append(temp.character);
                    temp = root;
                }
            }
            if (j == 1) {
                temp = temp.right;
                if (temp.left == null && temp.right == null) {
                    output.append(temp.character);
                    temp = root;
                }
            }
        }

        System.out.println("Decoded string is: " + output.toString());

    }
    public static void main(String[] args) {

        String input = "abababcdcdccef";
        System.out.println("Original input is: "+input);
        String s = encode(input);
        decode(s);

    }


}